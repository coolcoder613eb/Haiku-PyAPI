# Example usage:
# jam -j$(nproc) - build using all cpu cores
# jam clean - remove all build files	
# jam -sparameter=value - to pass a parameter
#
# Parameters:
# python_version - version of python to use such. Default value: 3.10
# install_location - place to put installed files. Defaults to site-packages
# py - alias of python_version
#
# Documentation for jam can be found at /boot/system/documentation/packages/jam
# * Jamfile.html provides a good reference for those writing Jamfiles.
# * Jambase.html documents the built-in rules.
# * Jam.html documents syntax and the jam command usage.

## Utility rules
# Maybe these should be built-in to Jambase.

# To create a shared library from some object files...
rule SharedLibraryFromObjects
{
	# Compile as if creating an executable
	MainFromObjects $(<) : $(>) ;
	# But build with the -shared flag when linking
	LINKFLAGS on $(<) = [ on $(<) return $(LINKFLAGS) ] -shared ;
}

# To create a shared library from some code files...
rule SharedLibrary
{
	# Compile the input files into .o files
	Objects $(>) ;
	# Then turn those .o files into a single .so file
	SharedLibraryFromObjects $(<) : $(>:S=$(SUFOBJ)) ;
	# Remove .o file after .so is made
	# NOTE: commenting this line out allows rebuilds to skip compiling .cpp
	# files that haven't been changed.
	# RmTemps $(<) : $(>:S=$(SUFOBJ)) ;
}

# To create a soft link, run the following command in the terminal.
# This replaces the built-in SoftLink action.
actions SoftLink
{
	$(RM) $(<) && $(LN) -sr $(>) $(<)
}

# This replaces the built-in Install action.
# This version preserves symlinks when copying.
actions Install
{
	$(CP) -P $(>) $(<)
}

# Create multiple symlinks to a single file
rule Symlink
{
	for targetFile in $(<) {
		# Put target file into LOCATE_TARGET directory
		MakeLocate $(targetFile) : $(LOCATE_TARGET) ;

		SoftLink $(targetFile) : $(>) ;
	}
}

## Main build file

# Set user configurable variables to default value if user did not specify value
py ?= 3.10 ;
python_version ?= $(py) ;
type ?= release ;
build_location ?= build/python$(python_version)_$(type) ;
install_location ?=
	/boot/system/non-packaged/lib/python$(python_version)/site-packages ;

# Where to search for .cpp files
SEARCH_SOURCE += bindings/interface bindings/app bindings/support bindings/storage bindings/kernel bindings/translation bindings/add-ons/screen_saver bindings/add-ons/registrar bindings/add-ons/graphics bindings/add-ons/input_server bindings/add-ons/mail_daemon bindings/add-ons/network_settings bindings/drivers bindings/device bindings/mail bindings/locale ;

# Where to look for header files
SubDirHdrs headers ;
SubDirHdrs headers/app ;
SubDirHdrs headers/interface ;
SubDirHdrs pybind11/include/ ;
SubDirHdrs /system/develop/headers/python$(python_version)/ ;

# Additional C++ flags to use when compiling
SubDirC++Flags -std=c++14 -pipe -fPIC -fvisibility=hidden ;
if $(type) = release {
	# Optimize for build size when making a release build
	SubDirC++Flags -Os ;
} else if $(type) = debug {
	# Include debug symbols when making a debug build
	# It seems Haiku's debugger still doesn't fully support dwarf-5 (the
	# default), so we'll tell it to use dwarf-4.
	SubDirC++Flags -gdwarf-4 ;
} else {
	Exit "Bad type given. Valid options are \"release\" and \"debug\"" ;
}

# Flags to use when linking
LINKLIBS = -lbe ;

# Where to put the generated build files
LOCATE_TARGET = $(build_location) ;

# The source files that we want to compile:
local sourceFiles =
	# AppKit
	AppDefs.cpp
	Application.cpp
	Clipboard.cpp
	Cursor.cpp
	Handler.cpp
	Invoker.cpp
	Key.cpp
	KeyStore.cpp
	Looper.cpp
	Message.cpp
	MessageFilter.cpp
	MessageQueue.cpp
	MessageRunner.cpp
	Messenger.cpp
	Notification.cpp
	PropertyInfo.cpp
	Roster.cpp

	# InterfaceKit
	InterfaceDefs.cpp
	Alert.cpp
	Button.cpp
	Control.cpp
	#OptionControl.cpp
	Rect.cpp
	Polygon.cpp
	Region.cpp
	StringView.cpp
	TextControl.cpp
	View.cpp
	Window.cpp
	Font.cpp
	TextView.cpp
	Menu.cpp
	MenuItem.cpp
	MenuField.cpp
	LayoutItem.cpp
	Layout.cpp
	AbstractLayout.cpp
	AbstractLayoutItem.cpp
	TwoDimensionalLayout.cpp
	GridLayout.cpp
	GridLayoutBuilder.cpp
	GroupLayout.cpp
	GroupLayoutBuilder.cpp
	LayoutContext.cpp
	LayoutUtils.cpp
	PopUpMenu.cpp
	Box.cpp
	SeparatorItem.cpp
	Alignment.cpp
	SeparatorView.cpp
	MenuBar.cpp
	StatusBar.cpp
	CheckBox.cpp
	Point.cpp
	ColorControl.cpp
	RadioButton.cpp
	ListView.cpp
	OutlineListView.cpp
	ScrollView.cpp
	ListItem.cpp
	Bitmap.cpp
	Picture.cpp
	PictureButton.cpp
	StringItem.cpp
	TabView.cpp
	ScrollBar.cpp
	GraphicsDefs.cpp
	Screen.cpp
	Shape.cpp
	Size.cpp
	Slider.cpp
	AffineTransform.cpp
	CardLayout.cpp
	CardView.cpp
	ChannelControl.cpp
	ChannelSlider.cpp
	ControlLook.cpp
	Deskbar.cpp
	Gradient.cpp
	GradientConic.cpp
	GradientDiamond.cpp
	GradientLinear.cpp
	GradientRadial.cpp
	GradientRadialFocus.cpp
	GridView.cpp
	Dragger.cpp
	#IconUtils.cpp
	Input.cpp
	PrintJob.cpp
	
	#SupportKit
	StopWatch.cpp
	Beep.cpp
	Locker.cpp
	Autolock.cpp
	BlockCache.cpp
	SupportDefs.cpp
	Archivable.cpp
	TypeConstants.cpp
	Architecture.cpp
	DateTime.cpp
	parsedate.cpp
	List.cpp
	String.cpp
	Flattenable.cpp
	StringList.cpp
	DataIO.cpp
	BufferedDataIO.cpp
	Url.cpp
	UTF8.cpp
	TLS.cpp
	
	#Kernel
	fs_attr.cpp
	OS.cpp
	
	#StorageKit
	StorageDefs.cpp
	Entry.cpp
	Node.cpp
	
	Directory.cpp
	File.cpp
	Volume.cpp
	VolumeRoster.cpp
	Path.cpp
	FindDirectory.cpp
	PathFinder.cpp
	SymLink.cpp
	Statable.cpp
	Mime.cpp
	MimeType.cpp
	Resources.cpp
	ResourceStrings.cpp
	EntryList.cpp
	Query.cpp
	NodeMonitor.cpp
	NodeInfo.cpp
	AppFileInfo.cpp
	#DiskDeviceDefs.cpp
	FilePanel.cpp
	
	# TranslationKit
	# NOTE: When adding a new file to this list, you will likely also want to
	# tell the compiler to link it with libtranslation.so below.
	TranslationDefs.cpp
	TranslatorRoster.cpp
	TranslationUtils.cpp
	Translator.cpp
	BitmapStream.cpp
	TranslatorFormats.cpp
	
	stat.cpp
	
	#add-ons
	ScreenSaver.cpp
	MimeSnifferAddon.cpp
	Accelerant.cpp
	GraphicsCard.cpp
	InputServerDevice.cpp
	InputServerFilter.cpp
	InputServerMethod.cpp
	MailProtocol.cpp
	MailFilter.cpp
	MailSettingsView.cpp
	NetworkProfile.cpp
	NetworkSettings.cpp
	NetworkSettingsAddOn.cpp
	
	#drivers
	#bios.cpp
	#module.cpp
	#bus_manager.cpp
	
	#device
	SerialPort.cpp
	Joystick.cpp
	USBKit.cpp
	A2D.cpp
	D2A.cpp
	DigitalPort.cpp

	#mail
	Email.cpp
	mail_encoding.cpp
	MailDaemon.cpp
	MailComponent.cpp
	MailContainer.cpp
	MailMessage.cpp
	MailAttachment.cpp
	MailSettings.cpp
	
	#locale
	Country.cpp
	Language.cpp
	Format.cpp
	FormattingConventions.cpp
	DateFormat.cpp
	DateTimeFormat.cpp
	TimeUnitFormat.cpp
	DurationFormat.cpp
	TimeFormat.cpp
	UnicodeChar.cpp
	StringFormat.cpp
	TextEncoding.cpp
	RelativeDateTimeFormat.cpp
	NumberFormat.cpp
	LocaleStrings.cpp
	LocaleRoster.cpp
	Locale.cpp
	Collator.cpp
	CatalogData.cpp
	Catalog.cpp
	
	;

# The .so files can be built from the .cpp files, each .cpp file mapping to
# its own .so file
for sourceFile  in $(sourceFiles) {
	SharedLibrary $(sourceFile:S=.so) : $(sourceFile) ;
}

LINKLIBS on UTF8.so = $(LINKLIBS) -ltextencoding ;
# FilePanel.so needs to be linked with libtracker.so
LINKLIBS on FilePanel.so = $(LINKLIBS) -ltracker ;

# Some/all files in the translation kit need libtranslation.so
LINKLIBS on TranslationDefs.so = $(LINKLIBS) -ltranslation ;
LINKLIBS on TranslatorRoster.so = $(LINKLIBS) -ltranslation ;
LINKLIBS on TranslationUtils.so = $(LINKLIBS) -ltranslation ;
LINKLIBS on Translator.so = $(LINKLIBS) -ltranslation ;
LINKLIBS on TranslatorFormats.so = $(LINKLIBS) -ltranslation ;
LINKLIBS on BitmapStream.so = $(LINKLIBS) -ltranslation ;

LINKLIBS on LocaleRoster.so = $(LINKLIBS) -llocalestub ;
#LINKLIBS on CatalogData.so = $(LINKLIBS) -llocalestub ;

#LINKLIBS on TimeFormat.so = $(LINKLIBS) -lsupport ;

LINKLIBS on ScreenSaver.so = $(LINKLIBS) -lscreensaver ;
#LINKLIBS on MimeSnifferAddon.so = $(LINKLIBS) -lstoragekit ;
#LINKLIBS on InputServerDevice.so = $(LINKLIBS) -linputkit ;
#LINKLIBS on InputServerFilter.so = $(LINKLIBS) -linputkit ;
#LINKLIBS on InputServerMethod.so = $(LINKLIBS) -linputkit ;
LINKLIBS on MailFilter.so = $(LINKLIBS) -lmail ;
LINKLIBS on MailSettingsView.so = $(LINKLIBS) -lmail ;
LINKLIBS on MailProtocol.so = $(LINKLIBS) -lmail ;
LINKLIBS on Email.so = $(LINKLIBS) -lmail ;
LINKLIBS on mail_encoding.so = $(LINKLIBS) -lmail ;
LINKLIBS on MailDaemon.so = $(LINKLIBS) -lmail ;
LINKLIBS on MailComponent.so = $(LINKLIBS) -lmail ;
LINKLIBS on MailAttachment.so = $(LINKLIBS) -lmail ;
LINKLIBS on MailContainer.so = $(LINKLIBS) -lmail ;
LINKLIBS on MailMessage.so = $(LINKLIBS) -lmail ;
LINKLIBS on MailSettings.so = $(LINKLIBS) -lmail ;
LINKLIBS on NetworkSettings.so = $(LINKLIBS) -lbnetapi ;


# __init__.py can be built by simply copying the file
MakeLocate __init__.py : $(LOCATE_TARGET) ; # Put it in the build directory
File __init__.py : bindings/__init__.py ;

# As part of `jam install`, copy the following files:
InstallLib $(install_location)/Be
	: $(sourceFiles:S=.so) __init__.py ;
