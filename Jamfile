# Example usage:
# jam -j$(nproc) - build using all cpu cores
# jam clean - remove all build files
# jam -sparameter=value - to pass a parameter
#
# Parameters:
# python_version - version of python to use such. Default value: 3.10
# install_location - place to put installed files. Defaults to site-packages
# py - alias of python_version
#
# Documentation for jam can be found at /boot/system/documentation/packages/jam
# * Jamfile.html provides a good reference for those writing Jamfiles.
# * Jambase.html documents the built-in rules.
# * Jam.html documents syntax and the jam command usage.

## Utility rules
# Maybe these should be built-in to Jambase.

# To create a shared library from some object files...
rule SharedLibraryFromObjects
{
	# Compile as if creating an executable
	MainFromObjects $(<) : $(>) ;
	# But build with the -shared flag when linking
	LINKFLAGS on $(<) = [ on $(<) return $(LINKFLAGS) ] -shared ;
}

# To create a shared library from some code files...
rule SharedLibrary
{
	# Compile the input files into .o files
	Objects $(>) ;
	# Then turn those .o files into a single .so file
	SharedLibraryFromObjects $(<) : $(>:S=$(SUFOBJ)) ;
	# Remove .o file after .so is made
	# NOTE: commenting this line out allows rebuilds to skip compiling .cpp
	# files that haven't been changed.
	# RmTemps $(<) : $(>:S=$(SUFOBJ)) ;
}

# To create a soft link, run the following command in the terminal.
# This replaces the built-in SoftLink action.
actions SoftLink
{
	$(RM) $(<) && $(LN) -sr $(>) $(<)
}

# This replaces the built-in Install action.
# This version preserves symlinks when copying.
actions Install
{
	$(CP) -P $(>) $(<)
}

# Create multiple symlinks to a single file
rule Symlink
{
	for targetFile in $(<) {
		# Put target file into LOCATE_TARGET directory
		MakeLocate $(targetFile) : $(LOCATE_TARGET) ;

		SoftLink $(targetFile) : $(>) ;
	}
}

## Main build file

# Set user configurable variables to default value if user did not specify value
py ?= 3.10 ;
python_version ?= $(py) ;
install_location ?=
	/boot/system/non-packaged/lib/python$(python_version)/site-packages ;

# Where to search for .cpp files
SEARCH_SOURCE += bindings/interface bindings/app bindings/support bindings/storage bindings/kernel ;

# Where to look for header files
SubDirHdrs /system/lib/python$(python_version)/vendor-packages/pybind11/include/ ;
SubDirHdrs /system/develop/headers/python$(python_version)/ ;

# Additional C++ flags to use when compiling
SubDirC++Flags -std=c++14 -pipe -fPIC ;

# Flags to use when linking
LINKLIBS = -lbe ;

# Where to put the generated build files
LOCATE_TARGET = bin/x86_64/python$(python_version) ; # TODO: hardcoded arch

# The source files that we want to compile:
local sourceFiles =
	# AppKit
	AppDefs.cpp
	Application.cpp
	Clipboard.cpp
	Cursor.cpp
	Handler.cpp
	Invoker.cpp
	Key.cpp
	KeyStore.cpp
	Looper.cpp
	Message.cpp
	MessageFilter.cpp
	MessageQueue.cpp
	MessageRunner.cpp
	Messenger.cpp
	Notification.cpp
	PropertyInfo.cpp
	Roster.cpp

	# InterfaceKit
	InterfaceDefs.cpp
	Alert.cpp
	Button.cpp
	Control.cpp
	Rect.cpp
	StringView.cpp
	TextControl.cpp
	View.cpp
	Window.cpp
	Font.cpp
	TextView.cpp
	Menu.cpp
	MenuItem.cpp
	MenuField.cpp
	LayoutItem.cpp
	Layout.cpp
	AbstractLayout.cpp
	TwoDimensionalLayout.cpp
	GridLayout.cpp
	PopUpMenu.cpp
	Box.cpp
	SeparatorItem.cpp
	Alignment.cpp
	SeparatorView.cpp
	MenuBar.cpp
	StatusBar.cpp
	CheckBox.cpp
	Point.cpp
	ColorControl.cpp
	RadioButton.cpp
	ListView.cpp
	ScrollView.cpp
	ListItem.cpp
	Bitmap.cpp
	Picture.cpp
	PictureButton.cpp
	StringItem.cpp
	TabView.cpp
	ScrollBar.cpp
	GraphicsDefs.cpp
	Screen.cpp
	Shape.cpp
	Size.cpp
	Slider.cpp
	
	#SupportKit
	Locker.cpp
	Autolock.cpp
	SupportDefs.cpp
	Archivable.cpp
	TypeConstants.cpp
	Architecture.cpp

	#Kernel
	fs_attr.cpp
	
	#StorageKit
	StorageDefs.cpp
	Entry.cpp
	Node.cpp
	Directory.cpp
	;

# The shared library Be.so can be built from the sourceFiles
SharedLibrary Be.so : $(sourceFiles) ;

# The symlinked libraries can be built by linking to Be.so
Symlink $(sourceFiles:S=.so) : Be.so ;

# __init__.py can be built by simply copying the file
MakeLocate __init__.py : $(LOCATE_TARGET) ; # Put it in the build directory
File __init__.py : bindings/__init__.py ;

# As part of `jam install`, copy the following files:
InstallLib $(install_location)/Be
	: Be.so $(sourceFiles:S=.so) __init__.py ;
